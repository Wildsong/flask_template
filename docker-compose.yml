version: '3.7'

# Starts these services:
#   redis, a message queue
#   webapp, a web app implemented with flask, see it on port 5002
#   worker, a celery app that processes requests from flask app
#   monitor, a celery app called 'flower' that monitors celery, see it on port 5555

services:
  redis:
  # This image is based on Debian;
  # there is an image based on Alpine but it uses an old Redis release.
    image: redis:latest
    deploy:
      mode: global
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 15s
    networks:
      default:
        aliases:
          - redis
  
  webapp:
    image: wildsong/celery
#    env_file: .env
    environment:
      - PYTHONPATH=/srv
      - FLASK_APP=start_celery_app
      # without these, flask app cannot find redis.
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
    command: flask run
    volumes:
      - .:/srv
    ports:
      - 5002:5002
    user: app
    networks:
      default:
        aliases:
          - webapp

  worker:
    image: wildsong/celery
    environment:
      - PYTHONPATH=/srv
      # without these, celery tries to connect to RabbitMQ instead of REDIS.
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
    command: celery --app=celery_worker worker --loglevel=info
    volumes:
      - .:/srv
    user: app
    networks:
      default:
        aliases:
          - worker

  monitor:
    image: wildsong/celery
    build:
      context: .
      dockerfile: Dockerfile.monitor
    environment:
      - PYTHONPATH=/srv
      # without these, celery tries to connect to RabbitMQ instead of REDIS.
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
    command: flower -A celery_worker
    volumes:
      - .:/srv
    ports: 
      - 5555:5555
    user: app
    networks:
      default:
        aliases:
          - monitor
